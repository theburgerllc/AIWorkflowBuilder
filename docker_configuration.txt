# Multi-stage Docker build for Claude AI Automation Builder
# Stage 1: Build client application
FROM node:18-alpine AS client-builder

WORKDIR /app/client

# Copy client package files
COPY client/package*.json ./
COPY client/tsconfig.json ./
COPY client/vite.config.ts ./

# Install client dependencies
RUN npm ci --only=production --silent

# Copy client source code
COPY client/src ./src
COPY client/public ./public
COPY client/index.html ./

# Build client application
RUN npm run build

# Stage 2: Build server application
FROM node:18-alpine AS server-builder

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy server package files
COPY package*.json ./
COPY tsconfig.json ./

# Install server dependencies
RUN npm ci --only=production --silent

# Copy server source code
COPY src ./src
COPY config ./config
COPY utils ./utils
COPY controllers ./controllers
COPY routes ./routes
COPY middleware ./middleware
COPY manifest.json ./

# Build server application (if using TypeScript)
RUN npm run build 2>/dev/null || echo "No build script found, using source files directly"

# Stage 3: Production runtime
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Install runtime dependencies only
RUN apk add --no-cache \
    tini \
    curl \
    && rm -rf /var/cache/apk/*

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production --silent && \
    npm cache clean --force

# Copy built applications from previous stages
COPY --from=server-builder --chown=nextjs:nodejs /app/dist ./dist 2>/dev/null || \
     COPY --from=server-builder --chown=nextjs:nodejs /app/src ./src
COPY --from=server-builder --chown=nextjs:nodejs /app/config ./config
COPY --from=server-builder --chown=nextjs:nodejs /app/utils ./utils
COPY --from=server-builder --chown=nextjs:nodejs /app/controllers ./controllers
COPY --from=server-builder --chown=nextjs:nodejs /app/routes ./routes
COPY --from=server-builder --chown=nextjs:nodejs /app/middleware ./middleware
COPY --from=server-builder --chown=nextjs:nodejs /app/manifest.json ./
COPY --from=server-builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built client files
COPY --from=client-builder --chown=nextjs:nodejs /app/client/dist ./public

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R nextjs:nodejs /app/logs /app/uploads /app/temp

# Copy startup scripts
COPY docker/entrypoint.sh ./entrypoint.sh
COPY docker/healthcheck.sh ./healthcheck.sh
RUN chmod +x ./entrypoint.sh ./healthcheck.sh

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080
ENV HOST=0.0.0.0

# Expose port
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ./healthcheck.sh

# Switch to non-root user
USER nextjs

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["./entrypoint.sh"]

# Labels for container metadata
LABEL maintainer="Claude AI Automation Solutions <support@claude-automation.com>"
LABEL description="Claude AI Automation Builder for Monday.com"
LABEL version="1.0.0"
LABEL vendor="Claude AI Automation Solutions"

# Docker build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="claude-automation-builder" \
      org.label-schema.description="AI-powered automation builder for Monday.com" \
      org.label-schema.url="https://claude-automation.com" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/your-org/claude-automation-builder" \
      org.label-schema.vendor="Claude AI Automation Solutions" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Additional optimizations
RUN npm prune --production && \
    rm -rf /tmp/* /var/tmp/* /root/.npm /home/nextjs/.npm

# Security enhancements
RUN chmod -R 755 /app && \
    chmod -R 644 /app/*.json /app/*.md 2>/dev/null || true

# Volume for persistent data
VOLUME ["/app/logs", "/app/uploads"]